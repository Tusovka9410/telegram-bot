import logging
import sqlite3
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ token.txt (–≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)
with open('token.txt', 'r') as f:
    TOKEN = f.read().strip()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
ADD_TASK, DELETE_TASK, EDIT_SELECT, EDIT_TASK, REMIND_SELECT_TASK, REMIND_DATE, REMIND_TIME = range(7)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        task TEXT NOT NULL,
        reminder_datetime TEXT
    )
    ''')
    conn.commit()
    conn.close()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å —ç–º–æ–¥–∑–∏)
def main_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='add'),
            InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data='list'),
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='edit'),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='delete'),
        ],
        [
            InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data='remind'),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π üëá",
        reply_markup=main_keyboard()
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_tasks(user_id):
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("SELECT id, task, reminder_datetime FROM tasks WHERE user_id = ? ORDER BY id", (user_id,))
    rows = c.fetchall()
    conn.close()
    return rows

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = get_tasks(user_id)
    if not tasks:
        text = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç."
    else:
        text = "–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
        for i, (task_id, task, reminder) in enumerate(tasks, 1):
            if reminder:
                try:
                    dt = datetime.fromisoformat(reminder)
                    reminder_str = dt.strftime(" (–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %d.%m.%Y %H:%M)")
                except:
                    reminder_str = ""
            else:
                reminder_str = ""
            text += f"{i}. {task}{reminder_str}\n"
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=main_keyboard())
    else:
        await update.message.reply_text(text, reply_markup=main_keyboard())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == 'add':
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
        return ADD_TASK

    elif data == 'delete':
        tasks = get_tasks(user_id)
        if not tasks:
            await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_keyboard())
            return ConversationHandler.END
        text = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        for i, (task_id, task, _) in enumerate(tasks, 1):
            text += f"{i}. {task}\n"
        await query.edit_message_text(text)
        return DELETE_TASK

    elif data == 'edit':
        tasks = get_tasks(user_id)
        if not tasks:
            await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.", reply_markup=main_keyboard())
            return ConversationHandler.END
        text = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        for i, (task_id, task, _) in enumerate(tasks, 1):
            text += f"{i}. {task}\n"
        await query.edit_message_text(text)
        return EDIT_SELECT

    elif data == 'remind':
        tasks = get_tasks(user_id)
        if not tasks:
            await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=main_keyboard())
            return ConversationHandler.END
        text = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for i, (task_id, task, _) in enumerate(tasks, 1):
            text += f"{i}. {task}\n"
        await query.edit_message_text(text)
        return REMIND_SELECT_TASK

    elif data == 'list':
        await show_tasks(update, context)
        return ConversationHandler.END

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_keyboard())
        return ConversationHandler.END


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    task_text = update.message.text.strip()
    if not task_text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return ADD_TASK

    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("INSERT INTO tasks (user_id, task) VALUES (?, ?)", (user_id, task_text))
    conn.commit()
    conn.close()

    await update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_keyboard())
    return ConversationHandler.END
# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Äî –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        num = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–π:")
        return DELETE_TASK

    tasks = get_tasks(user_id)
    if num < 1 or num > len(tasks):
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        return DELETE_TASK

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –µ—ë id
    task_id = tasks[num - 1][0]
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE id = ? AND user_id = ?", (task_id, user_id))
    conn.commit()

    # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è ID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ —Å–ø–∏—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
    conn.close()

    await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_keyboard())
    return ConversationHandler.END


# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä
async def edit_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        num = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–π:")
        return EDIT_SELECT

    tasks = get_tasks(user_id)
    if num < 1 or num > len(tasks):
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        return EDIT_SELECT

    context.user_data['edit_task_id'] = tasks[num - 1][0]
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return EDIT_TASK

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
async def edit_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    new_text = update.message.text.strip()
    if not new_text:
        await update.message.reply_text("–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        return EDIT_TASK

    task_id = context.user_data.get('edit_task_id')
    if not task_id:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END

    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("UPDATE tasks SET task = ? WHERE id = ? AND user_id = ?", (new_text, task_id, user_id))
    conn.commit()
    conn.close()

    await update.message.reply_text("–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard())
    return ConversationHandler.END


# –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def remind_select_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        num = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —Ü–∏—Ñ—Ä–æ–π:")
        return REMIND_SELECT_TASK

    tasks = get_tasks(user_id)
    if num < 1 or num > len(tasks):
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç. –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:")
        return REMIND_SELECT_TASK

    context.user_data['remind_task_id'] = tasks[num - 1][0]
    await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16.05.2025):")
    return REMIND_DATE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def remind_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_str = update.message.text.strip()
    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return REMIND_DATE

    context.user_data['remind_date'] = date_obj
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:30):")
    return REMIND_TIME

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
async def remind_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    try:
        time_obj = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return REMIND_TIME

    date_obj = context.user_data.get('remind_date')
    if not date_obj:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    reminder_dt = datetime.combine(date_obj.date(), time_obj)
    if reminder_dt <= datetime.now():
        await update.message.reply_text("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ:")
        return REMIND_DATE

    task_id = context.user_data.get('remind_task_id')
    user_id = update.message.from_user.id
    if not task_id:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("UPDATE tasks SET reminder_datetime = ? WHERE id = ? AND user_id = ?", (reminder_dt.isoformat(), task_id, user_id))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_dt.strftime('%d.%m.%Y %H:%M')}", reply_markup=main_keyboard())
    return ConversationHandler.END


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def reminder_checker(application):
    while True:
        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        now_iso = datetime.now().isoformat()
        c.execute("SELECT id, user_id, task FROM tasks WHERE reminder_datetime <= ? AND reminder_datetime IS NOT NULL", (now_iso,))
        rows = c.fetchall()
        for task_id, user_id, task_text in rows:
            try:
                await application.bot.send_message(chat_id=user_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_text}")
                # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                c.execute("UPDATE tasks SET reminder_datetime = NULL WHERE id = ?", (task_id,))
                conn.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        conn.close()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–º–∞–Ω–¥—ã
async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Conversation, –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if context.user_data.get('current_state') is None:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –Ω–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state = context.user_data.get('current_state')
        if state == ADD_TASK:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
        elif state == DELETE_TASK:
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        elif state == EDIT_SELECT:
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        elif state == EDIT_TASK:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        elif state == REMIND_SELECT_TASK:
            await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        elif state == REMIND_DATE:
            await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        elif state == REMIND_TIME:
            await update.message.reply_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    init_db()
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ADD_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_task)],
            DELETE_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_task)],
            EDIT_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_select)],
            EDIT_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_task)],
            REMIND_SELECT_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, remind_select_task)],
            REMIND_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, remind_date)],
            REMIND_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, remind_time)],
        },
        fallbacks=[],
        allow_reentry=True,
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    application.job_queue.run_repeating(lambda ctx: asyncio.create_task(reminder_checker(application)), interval=60, first=5)

    application.run_polling()


if __name__ == "__main__":
    main()


